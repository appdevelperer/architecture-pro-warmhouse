@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Диаграмма контейнеров (C4): Экосистема "Тёплый дом" (To-Be)

Person(user, "Пользователь", "Регистрируется, покупает комплекты, настраивает сценарии, управляет домом")

Container(web_app, "Веб-портал самообслуживания", "React", "Интерфейс для покупки, настройки, управления сценариями и просмотра телеметрии")
Container(mobile_app, "Мобильное приложение", "iOS/Android", "Управление устройствами в реальном времени")

Container_Boundary(smartHomePlatform, "Экосистема умного дома (SaaS)") {
    Container(user_service, "User Service", "Go", "Управление пользователями, аутентификация, профили (User Management BC)")
    Container(device_service, "Device Service", "Go", "Регистрация, конфигурация, управление жизненным циклом устройств (Device Management BC)")
    Container(scenario_service, "Scenario Service", "Go", "Создание, хранение и выполнение автоматизированных сценариев (Scenario Engine BC)")
    Container(telemetry_service, "Telemetry Service", "Go + InfluxDB", "Сбор, агрегация и хранение телеметрии с устройств (Telemetry BC)")
    Container(catalog_service, "Catalog Service", "Go", "Управление каталогом комплектов, активация после покупки (Product Catalog BC)")
    Container(integration_gateway, "Integration Gateway", "Go", "Адаптация команд к протоколам устройств партнёров (Integration BC)")

    ContainerDb(user_db, "User Database", "PostgreSQL", "Хранение профилей пользователей")
    ContainerDb(device_db, "Device Database", "PostgreSQL", "Хранение конфигураций и состояний устройств")
    ContainerDb(telemetry_db, "Telemetry Database", "InfluxDB", "Хранение временных рядов (температура, статусы и т.д.)")

    Rel(user_service, user_db, "Читает/пишет данные", "SQL")
    Rel(device_service, device_db, "Читает/пишет конфигурации", "SQL")
    Rel(telemetry_service, telemetry_db, "Пишет/агрегирует телеметрию", "InfluxQL")

    Rel(device_service, integration_gateway, "Отправляет команды", "gRPC")
    Rel(integration_gateway, device_service, "Отправляет события/статусы", "HTTP Callback")

    Rel(scenario_service, device_service, "Выполняет команды по сценариям", "HTTP")
    Rel(scenario_service, telemetry_service, "Читает условия (например, температуру)", "HTTP")

    Rel(catalog_service, device_service, "Активирует устройства после покупки", "HTTP")
}

Rel(user, web_app, "Регистрируется, покупает, настраивает", "HTTPS")
Rel(user, mobile_app, "Управляет в реальном времени", "HTTPS")

Rel(web_app, user_service, "Аутентификация, управление профилем", "HTTP")
Rel(web_app, catalog_service, "Просмотр каталога, покупка", "HTTP")
Rel(web_app, device_service, "Настройка устройств", "HTTP")
Rel(web_app, scenario_service, "Создание сценариев", "HTTP")
Rel(web_app, telemetry_service, "Просмотр графиков", "WebSocket")

Rel(mobile_app, device_service, "Отправка команд", "WebSocket")
Rel(mobile_app, telemetry_service, "Получение телеметрии", "WebSocket")

note right of integration_gateway
  Поддерживает стандартные протоколы:
  - HTTP (REST)
  - MQTT (в будущем)
  - Zigbee через шлюзы (в будущем)
end note

LAYOUT_WITH_LEGEND()

@enduml